num_classes: &num_classes 89
runtime:
  task_names: cls
  runner:
    type: base
    kwargs:
      work_dir: /tmp/output/

random_resized_crop: &random_resized_crop
 type: torch_random_resized_crop_wh_filter
 kwargs:
   size: 112
   scale: [0.25, 1]
   ratio: [0.6, 1.6]

random_resized_crop_wh_filter: &random_resized_crop_wh_filter
 type: torch_random_resized_crop_wh_filter
 kwargs:
   size: 112
   scale: [0.25, 1]
   ratio: [0.6, 1.6]


pil_color_jitter: &pil_color_jitter
 type: torch_color_jitter
 kwargs:
  brightness: 0.4
  contrast: 0.4
  saturation: 0.4

center_crop: &center_crop
  type: torch_center_crop
  kwargs:
    size: 112

random_affine: &random_affine
  type: torch_random_affine

random_pad: &random_pad
  type: torch_random_pad

gaussion_blur: &gaussion_blur
  type: torch_gaussion_blur

random_noise: &random_noise
  type: torch_random_noise

torch_size: &torch_resize
  type: torch_resize
  kwargs:
    size: [128,128]

to_tensor: &to_tensor
  type: to_tensor

normalize: &normalize
 type: normalize
 kwargs:
   mean: [0.485, 0.456, 0.406] # ImageNet pretrained statics
   std: [0.229, 0.224, 0.225]

dataset: # Required.
  train:
    dataset:
      type: cls
      kwargs:
        meta_file: /tmp/dataset/train.txt
        image_reader:
          type: fs_pillow
          kwargs:
            image_dir: /tmp/dataset
            color_mode: RGB
        transformer: [*random_pad, *random_noise, *random_affine, *random_resized_crop_wh_filter, *pil_color_jitter, *gaussion_blur, *to_tensor, *normalize]
#        transformer: [*random_resized_crop, *pil_color_jitter, *gaussion_blur, *to_tensor, *normalize]
#        transformer: [*random_resized_crop, *pil_color_jitter, *to_tensor, *normalize]
    batch_sampler:
        type: base
        kwargs:
          sampler:
            type: dist
            kwargs: {}
          batch_size: 64
    dataloader:
        type: cls_base
        kwargs:
          num_workers: 4
          pin_memory: True
#          batch_fn:
#            type: batch_cutmixup
#            kwargs:
#              mixup_alpha: 0.1
#              cutmix_alpha: 1.0
#              switch_prob: 0.5
#              num_classes: *num_classes
  test:
    dataset:
      type: cls
      kwargs:
        meta_file: /tmp/dataset/train.txt
        image_reader:
          type: fs_pillow
          kwargs:
            image_dir: /tmp/dataset
            color_mode: RGB
        transformer: [*torch_resize, *center_crop, *to_tensor, *normalize]
        evaluator:
          type: imagenet               # choices = {'COCO', 'VOC', 'MR'}
          kwargs:
             topk: [1, 5]
    batch_sampler:
      type: base
      kwargs:
        sampler:
          type: dist
          kwargs: {}
        batch_size: 32
    dataloader:
      type: cls_base
      kwargs:
        num_workers: 0
        pin_memory: False

ema:
    enable: False
    kwargs:
        decay: 0.9999

trainer: # Required.
  max_epoch: 100
  test_freq: 20
  save_freq: 5
  only_save_latest: True
  optimizer:                 # optimizer = SGD(params,lr=0.001,momentum=0.9,weight_decay=0.0001)
    type: LAMB
    kwargs:
      lr: 0.008
      weight_decay: 0.02
  lr_scheduler:
    warmup_iter: 200
    warmup_type: linear
    warmup_register_type: no_scale_lr
    warmup_ratio: 0.02
    type: CosineAnnealingLR
    kwargs:
        T_max: 100
        eta_min: 0.0
        warmup_iter: 200
saver: # Required.
  save_dir: resnet_0.25_100e_strikes_bce_eql/checkpoints/cls_std     # dir to save checkpoints
  results_dir: resnet_0.25_100e_strikes_bce_eql/results_dir/cls_std  # dir to save detection results. i.e., bboxes, masks, keypoints
  auto_resume: false  # find last checkpoint from save_dir and resume from it automatically
                     # this option has the highest priority (auto_resume > opts > resume_model > pretrain_model)

hooks:
  - type: auto_save_best
  - type: gradient_collector
    kwargs:
      hook_module: [post_process.cls_loss]
      collect_func_module: post_process.cls_loss
      grad_type: input

net: &subnet
  - name: backbone              # backbone = resnet50(frozen_layers, out_layers, out_strides)
    type: resnet18_cbam
    kwargs:
      frozen_layers: []
      out_layers: [3]     # layer1...4, commonly named Conv2...5
      out_strides: [16]  # tell the strides of output features
      normalize:
        type: solo_bn
      initializer:
        method: msra
      multiplier: 0.5
  - name: head
    type: base_cls_head
    kwargs:
       num_classes: *num_classes
       in_plane: &head_out_channel 128
       input_feature_idx: -1
  - name: post_process
    type: base_cls_postprocess
    kwargs:
       cls_loss:
         type: softmax_eql
         kwargs:
            num_classes: *num_classes
            indicator: pos
            tau: 1.0